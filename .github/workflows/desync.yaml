name: build

on:
  push:
    branches:
      - master
      - ci
      - 'release/**'
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'

jobs:
  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        cc:
          - "clang"
        cxx:
          - "clang++"
        os:
          - "macos-13"
          - "macos-14"
          - "macos-15"
        include:
          - os: "macos-13"
            arch: "intel"
          - os: "macos-14"
            arch: "arm"
            xcode: "Xcode_15.2"
          - os: "macos-15"
            arch: "arm"
    steps:
      - uses: actions/checkout@v4

      - name: Remove stray upstream python binary symlinks under /usr/local
        run: |
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete -print
          brew unlink python && brew link --overwrite python

      - name: Change Xcode version
        if: ${{ matrix.xcode != '' }}
        run: |
          sudo xcode-select -s /Applications/${{ matrix.xcode }}.app

      - name: Install dependencies
        run: |
          brew update
          brew install -q autoconf automake pkg-config libtool python freetype fribidi little-cms2 \
            luajit libass ffmpeg meson uchardet mujs libplacebo molten-vk vulkan-loader vulkan-headers

      - name: Build with meson
        id: build
        run: |
          ./ci/build-macos.sh
        env:
          CC: "${{ matrix.cc }}"
          CXX: "${{ matrix.cxx }}"
          TRAVIS_OS_NAME: "${{ matrix.os }}"

      - name: Create App Bundle
        run: |
          meson compile -C build macos-bundle
          tar -czvf mpv.tar.gz -C build mpv.app

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

      - name: Run meson tests
        id: tests
        run: |
          meson test -C build

      - name: Print meson test log
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/testlog.txt

      - uses: actions/upload-artifact@v4
        with:
          name: mpv-${{ matrix.os }}-${{ matrix.arch }}
          path: mpv.tar.gz

  linux:
    runs-on: ubuntu-latest
    container:
      image: "registry.opensuse.org/home/mia/images/images/mpv-ci:stable-deps"
      env:
        CC: "${{ matrix.config.cc }}"
        CXX: "${{ matrix.config.cxx }}"
        ASAN_OPTIONS: "halt_on_error=1:abort_on_error=1:print_summary=1:detect_leaks=0"
    strategy:
      matrix:
        config:
        - {
            cc: "gcc",
            cxx: "g++",
          }
        - {
            cc: "clang",
            cxx: "clang++",
          }
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # workaround to avoid "fatal: unsafe repository" error
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build with meson
        id: build
        run: |
          ./ci/build-tumbleweed.sh

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

      - name: Run meson tests
        id: tests
        run: |
          meson test -C build

      - name: Print meson test log
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/testlog.txt
